name: 'Terraform Plan/Apply'

on: 
  workflow_call:
    inputs:
      market:
        description: 'Market to deploy to'     
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      service:
        description: 'Service to deploy'
        required: true
        type: string
      apply:
        description: 'Apply changes'
        required: true
        default: "false"
        type: string
      action:
        description: 'Action'
        required: true
        default: "apply"
        type: string

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    if: |
      github.ref == 'refs/heads/master' 
      && inputs.action == 'apply'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        current_working_directory=$(pwd)
        backend_env_file="$current_working_directory/variables/grp/prd/bed.env"
        echo "Backend env file is $backend_env_file"
        source $backend_env_file
        TERRAFORM_BACKEND_AZURE_KEY=${{ inputs.market }}/${{ inputs.environment }}/${{ inputs.service }}.tfstate
        echo "TERRAFORM_BACKEND_AZURE_KEY is $TERRAFORM_BACKEND_AZURE_KEY"
    
        cd terraform/${{ inputs.service }}

        terraform init \
         -backend-config="subscription_id=$TERRAFORM_BACKEND_AZURE_SUBSCRIPTION_ID" \
         -backend-config="resource_group_name=$TERRAFORM_BACKEND_AZURE_RESOURCE_GROUP_NAME" \
         -backend-config="storage_account_name=$TERRAFORM_BACKEND_AZURE_STORAGE_ACCOUNT_NAME" \
         -backend-config="container_name=$TERRAFORM_BACKEND_AZURE_CONTAINER_NAME" \
         -backend-config="key=$TERRAFORM_BACKEND_AZURE_KEY"
 

    - name: Apply any patches
      run: |
        if [[ "${{ inputs.service }}" == "services" ]]; then
          echo "Running patch for AML Private Endpoint"
          chmod +x ./patch/patch.sh
          ./patch/patch.sh
          echo "Patch completed"
        fi
    
    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: |
        cd terraform/${{ inputs.service }}
        terraform fmt -recursive -check

    - name: Find environemnt type
      run: |
        env_type="npd"
        input_environment="${{ inputs.environment }}"
        echo "Input environment is $input_environment"
        if [[ "$input_environment" == "prd" ]]; then
          env_type="prd"
        fi
        echo "env_type is $env_type"
        echo "env_type=$env_type" >> $GITHUB_ENV
    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        cd terraform/${{ inputs.service }}
        export exitcode=0
        terraform plan \
        -var market=${{ inputs.market }} \
        -var environment=${{ inputs.environment }} \
        -var env_type=$env_type \
        -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: terraform/${{ inputs.service }}/tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        cd terraform/${{ inputs.service }}
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      continue-on-error: true
      run: |
        cd terraform/${{ inputs.service }}
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/master'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

    - name: Remove virtual environment
      if: always()
      run: |
        rm -rf ${GITHUB_WORKSPACE}/.iacvenv

                
  terraform-apply:
    name: 'Terraform Apply'
    if: |
      github.ref == 'refs/heads/master' 
      && needs.terraform-plan.outputs.tfplanExitCode == 2 
      && inputs.apply == 'true'
      && inputs.action == 'apply'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    # Setup Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python --version
        python -m venv ${GITHUB_WORKSPACE}/.iacvenv
        ${GITHUB_WORKSPACE}/.iacvenv/bin/python -m pip install --upgrade pip
        ${GITHUB_WORKSPACE}/.iacvenv/bin/pip install -r ./scripts/requirements.txt

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        current_working_directory=$(pwd)
        backend_env_file="$current_working_directory/variables/grp/prd/bed.env"
        echo "Backend env file is $backend_env_file"
        source $backend_env_file
        TERRAFORM_BACKEND_AZURE_KEY=${{ inputs.market }}/${{ inputs.environment }}/${{ inputs.service }}.tfstate
        echo "TERRAFORM_BACKEND_AZURE_KEY is $TERRAFORM_BACKEND_AZURE_KEY"

        cd terraform/${{ inputs.service }}

        terraform init \
         -backend-config="subscription_id=$TERRAFORM_BACKEND_AZURE_SUBSCRIPTION_ID" \
         -backend-config="resource_group_name=$TERRAFORM_BACKEND_AZURE_RESOURCE_GROUP_NAME" \
         -backend-config="storage_account_name=$TERRAFORM_BACKEND_AZURE_STORAGE_ACCOUNT_NAME" \
         -backend-config="container_name=$TERRAFORM_BACKEND_AZURE_CONTAINER_NAME" \
         -backend-config="key=$TERRAFORM_BACKEND_AZURE_KEY"

    - name: Apply any patches
      run: |
        if [[ "${{ inputs.service }}" == "services" ]]; then
          echo "Running patch for AML Private Endpoint"
          chmod +x ./patch/patch.sh
          ./patch/patch.sh
          echo "Patch completed"
        fi
  
    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: terraform/${{ inputs.service }}

    # Terraform Apply
    - name: Terraform Apply
      run: |
        cd terraform/${{ inputs.service }}
        terraform ${{ inputs.action }} -auto-approve tfplan

  terraform-destroy:
    name: 'Terraform Destroy'
    if: |
      github.ref == 'refs/heads/master' 
      && inputs.action == 'destroy' 
      && inputs.apply == 'true'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        current_working_directory=$(pwd)
        backend_env_file="$current_working_directory/variables/grp/prd/bed.env"
        echo "Backend env file is $backend_env_file"
        source $backend_env_file
        TERRAFORM_BACKEND_AZURE_KEY=${{ inputs.market }}/${{ inputs.environment }}/${{ inputs.service }}.tfstate
        echo "TERRAFORM_BACKEND_AZURE_KEY is $TERRAFORM_BACKEND_AZURE_KEY"

        cd terraform/${{ inputs.service }}

        terraform init \
         -backend-config="subscription_id=$TERRAFORM_BACKEND_AZURE_SUBSCRIPTION_ID" \
         -backend-config="resource_group_name=$TERRAFORM_BACKEND_AZURE_RESOURCE_GROUP_NAME" \
         -backend-config="storage_account_name=$TERRAFORM_BACKEND_AZURE_STORAGE_ACCOUNT_NAME" \
         -backend-config="container_name=$TERRAFORM_BACKEND_AZURE_CONTAINER_NAME" \
         -backend-config="key=$TERRAFORM_BACKEND_AZURE_KEY"

    - name: Find environemnt type
      run: |
        env_type="npd"
        input_environment="${{ inputs.environment }}"
        echo "Input environment is $input_environment"
        if [[ "$input_environment" == "prd" ]]; then
          env_type="prd"
        fi
        echo "env_type is $env_type"
        echo "env_type=$env_type" >> $GITHUB_ENV

    # Terraform Destroy
    - name: Terraform Destroy
      run: |
        cd terraform/${{ inputs.service }}
        terraform ${{ inputs.action }} \
        -var market=${{ inputs.market }} \
        -var environment=${{ inputs.environment }} \
        -var env_type=$env_type \
        -auto-approve
