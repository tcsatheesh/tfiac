name: "Terraform Import Service"

on: 
  workflow_dispatch:
    inputs:
      market:
        description: 'Market to deploy to'
        required: true
        type: choice
        options:
          - grp
          - pt
          - tr
      service:
        description: 'Service to deploy'
        required: true
        default: "dns"
        type: choice
        options:
          - vnet
          - dns
          - log
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - prd
          - npd
#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-import:
    name: "Terraform Import"
    runs-on: ubuntu-latest
    environment: ${{ inputs.market }}_${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python --version
          python -m venv ${GITHUB_WORKSPACE}/.iacvenv
          ${GITHUB_WORKSPACE}/.iacvenv/bin/python -m pip install --upgrade pip
          ${GITHUB_WORKSPACE}/.iacvenv/bin/pip install -r ./scripts/requirements.txt

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)

          current_working_directory=$(pwd)
          backend_env_file="$current_working_directory/variables/grp/prd/bed.env"
          echo "Backend env file is $backend_env_file"
          source $backend_env_file
          TERRAFORM_BACKEND_AZURE_KEY=${{ inputs.market }}/${{ inputs.environment }}/${{ inputs.service }}.tfstate
          echo "TERRAFORM_BACKEND_AZURE_KEY is $TERRAFORM_BACKEND_AZURE_KEY"
  
          cd terraform/${{ inputs.service }}

          terraform init \
          -backend-config="subscription_id=$TERRAFORM_BACKEND_AZURE_SUBSCRIPTION_ID" \
          -backend-config="resource_group_name=$TERRAFORM_BACKEND_AZURE_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$TERRAFORM_BACKEND_AZURE_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TERRAFORM_BACKEND_AZURE_CONTAINER_NAME" \
          -backend-config="key=$TERRAFORM_BACKEND_AZURE_KEY"

      - name: Apply any patches
        run: |
          if [[ "${{ inputs.service }}" == "services" ]]; then
            echo "Running patch for AML Private Endpoint"
            chmod +x ./patch/patch.sh
            ./patch/patch.sh
            echo "Patch completed"
          fi
      - name: Find environemnt type
        run: |
          env_type="npd"
          input_environment="${{ inputs.environment }}"
          echo "Input environment is $input_environment"
          if [[ "$input_environment" == "prd" ]]; then
            env_type="prd"
          fi
          echo "env_type is $env_type"
          echo "env_type=$env_type" >> $GITHUB_ENV

      # Import the terraform state.
      - name: Terraform Import
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          ${GITHUB_WORKSPACE}/.iacvenv/bin/python \
          ./scripts/src/import/${{ inputs.service }}.py \
          --service ${{ inputs.service }} \
          --market ${{ inputs.market }} \
          --environment ${{ inputs.environment }} \
          --env-type $env_type \
          --folder terraform/${{ inputs.service }} \
          --services-variables variables/${{ inputs.market }}/${{ inputs.environment }}/${{ inputs.service }}.yaml \
          --vnet-variables variables/${{ inputs.market }}/$env_type/vnet.yaml \
          --dns-variables variables/grp/prd/dns.yaml \
          --remote-vnet-variables variables/grp/$env_type/vnet.yaml \
          --firewall-variables variables/grp/$env_type/firewall.yaml \
          --log-variables variables/grp/$env_type/log.yaml \
          --yes

      - name: Remove virtual environment
        if: always()
        run: |
          rm -rf ${GITHUB_WORKSPACE}/.iacvenv
